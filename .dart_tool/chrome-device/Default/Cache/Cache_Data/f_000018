define(['dart_sdk', 'packages/flutter/src/services/system_channels.dart', 'packages/firebase_core/firebase_core.dart'], (function load__packages__firebase_auth__firebase_auth_dart(dart_sdk, packages__flutter__src__services__system_channels$46dart, packages__firebase_core__firebase_core$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const async = dart_sdk.async;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const message_codec = packages__flutter__src__services__system_channels$46dart.src__services__message_codec;
  const platform_channel = packages__flutter__src__services__system_channels$46dart.src__services__platform_channel;
  const message_codecs = packages__flutter__src__services__system_channels$46dart.src__services__message_codecs;
  const firebase_core = packages__firebase_core__firebase_core$46dart.firebase_core;
  var firebase_auth = Object.create(dart.library);
  var $_set = dartx._set;
  var $remove = dartx.remove;
  var $cast = dartx.cast;
  var $_get = dartx._get;
  var $toString = dartx.toString;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    StringL: () => (T.StringL = dart.constFn(dart.legacy(core.String)))(),
    IdentityMapOfStringL$StringL: () => (T.IdentityMapOfStringL$StringL = dart.constFn(_js_helper.IdentityMap$(T.StringL(), T.StringL())))(),
    intL: () => (T.intL = dart.constFn(dart.legacy(core.int)))(),
    FirebaseUserL: () => (T.FirebaseUserL = dart.constFn(dart.legacy(firebase_auth.FirebaseUser)))(),
    StreamControllerOfFirebaseUserL: () => (T.StreamControllerOfFirebaseUserL = dart.constFn(async.StreamController$(T.FirebaseUserL())))(),
    StreamControllerLOfFirebaseUserL: () => (T.StreamControllerLOfFirebaseUserL = dart.constFn(dart.legacy(T.StreamControllerOfFirebaseUserL())))(),
    IdentityMapOfintL$StreamControllerLOfFirebaseUserL: () => (T.IdentityMapOfintL$StreamControllerLOfFirebaseUserL = dart.constFn(_js_helper.IdentityMap$(T.intL(), T.StreamControllerLOfFirebaseUserL())))(),
    MapOfStringL$dynamic: () => (T.MapOfStringL$dynamic = dart.constFn(core.Map$(T.StringL(), dart.dynamic)))(),
    MapLOfStringL$dynamic: () => (T.MapLOfStringL$dynamic = dart.constFn(dart.legacy(T.MapOfStringL$dynamic())))(),
    IdentityMapOfintL$MapLOfStringL$dynamic: () => (T.IdentityMapOfintL$MapLOfStringL$dynamic = dart.constFn(_js_helper.IdentityMap$(T.intL(), T.MapLOfStringL$dynamic())))(),
    FutureOrOfintL: () => (T.FutureOrOfintL = dart.constFn(async.FutureOr$(T.intL())))(),
    FutureOrLOfintL: () => (T.FutureOrLOfintL = dart.constFn(dart.legacy(T.FutureOrOfintL())))(),
    dynamicToFutureOrLOfintL: () => (T.dynamicToFutureOrLOfintL = dart.constFn(dart.fnType(T.FutureOrLOfintL(), [dart.dynamic])))(),
    intLToNull: () => (T.intLToNull = dart.constFn(dart.fnType(core.Null, [T.intL()])))(),
    VoidToNull: () => (T.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    IdentityMapOfStringL$dynamic: () => (T.IdentityMapOfStringL$dynamic = dart.constFn(_js_helper.IdentityMap$(T.StringL(), dart.dynamic)))(),
    FutureOfNull: () => (T.FutureOfNull = dart.constFn(async.Future$(core.Null)))(),
    FutureLOfNull: () => (T.FutureLOfNull = dart.constFn(dart.legacy(T.FutureOfNull())))(),
    intLToFutureLOfNull: () => (T.intLToFutureLOfNull = dart.constFn(dart.fnType(T.FutureLOfNull(), [T.intL()])))(),
    MapL: () => (T.MapL = dart.constFn(dart.legacy(core.Map)))(),
    ListL: () => (T.ListL = dart.constFn(dart.legacy(core.List)))(),
    ListOfStringL: () => (T.ListOfStringL = dart.constFn(core.List$(T.StringL())))(),
    ListLOfStringL: () => (T.ListLOfStringL = dart.constFn(dart.legacy(T.ListOfStringL())))(),
    boolL: () => (T.boolL = dart.constFn(dart.legacy(core.bool)))(),
    FirebaseUserLTovoid: () => (T.FirebaseUserLTovoid = dart.constFn(dart.fnType(dart.void, [T.FirebaseUserL()])))(),
    FirebaseUserLToLvoid: () => (T.FirebaseUserLToLvoid = dart.constFn(dart.legacy(T.FirebaseUserLTovoid())))(),
    AuthExceptionL: () => (T.AuthExceptionL = dart.constFn(dart.legacy(firebase_auth.AuthException)))(),
    AuthExceptionLTovoid: () => (T.AuthExceptionLTovoid = dart.constFn(dart.fnType(dart.void, [T.AuthExceptionL()])))(),
    AuthExceptionLToLvoid: () => (T.AuthExceptionLToLvoid = dart.constFn(dart.legacy(T.AuthExceptionLTovoid())))(),
    StringLAndintLTovoid: () => (T.StringLAndintLTovoid = dart.constFn(dart.fnType(dart.void, [T.StringL()], [T.intL()])))(),
    StringLAndintLToLvoid: () => (T.StringLAndintLToLvoid = dart.constFn(dart.legacy(T.StringLAndintLTovoid())))(),
    StringLTovoid: () => (T.StringLTovoid = dart.constFn(dart.fnType(dart.void, [T.StringL()])))(),
    StringLToLvoid: () => (T.StringLToLvoid = dart.constFn(dart.legacy(T.StringLTovoid())))(),
    UserInfoL: () => (T.UserInfoL = dart.constFn(dart.legacy(firebase_auth.UserInfo)))(),
    dynamicToUserInfoL: () => (T.dynamicToUserInfoL = dart.constFn(dart.fnType(T.UserInfoL(), [dart.dynamic])))(),
    ListOfUserInfoL: () => (T.ListOfUserInfoL = dart.constFn(core.List$(T.UserInfoL())))(),
    ListLOfUserInfoL: () => (T.ListLOfUserInfoL = dart.constFn(dart.legacy(T.ListOfUserInfoL())))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C2() {
      return C[2] = dart.const({
        __proto__: message_codecs.StandardMessageCodec.prototype
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: message_codecs.StandardMethodCodec.prototype,
        [StandardMethodCodec_messageCodec]: C[2] || CT.C2
      });
    },
    get C0() {
      return C[0] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[1] || CT.C1,
        [MethodChannel_name]: "plugins.flutter.io/firebase_auth"
      });
    }
  }, false);
  var C = Array(3).fill(void 0);
  var I = [
    "package:firebase_auth/firebase_auth.dart",
    "file:///C:/Src/flutter/.pub-cache/hosted/pub.dartlang.org/firebase_auth-0.8.4+5/lib/src/firebase_auth.dart",
    "file:///C:/Src/flutter/.pub-cache/hosted/pub.dartlang.org/firebase_auth-0.8.4+5/lib/src/firebase_user.dart"
  ];
  firebase_auth.EmailAuthProvider = class EmailAuthProvider extends core.Object {
    static getCredential(opts) {
      let email = opts && 'email' in opts ? opts.email : null;
      let password = opts && 'password' in opts ? opts.password : null;
      return new firebase_auth.AuthCredential.__("password", new (T.IdentityMapOfStringL$StringL()).from(["email", email, "password", password]));
    }
    static getCredentialWithLink(opts) {
      let email = opts && 'email' in opts ? opts.email : null;
      let link = opts && 'link' in opts ? opts.link : null;
      return new firebase_auth.AuthCredential.__("password", new (T.IdentityMapOfStringL$StringL()).from(["email", email, "link", link]));
    }
  };
  (firebase_auth.EmailAuthProvider.new = function() {
    ;
  }).prototype = firebase_auth.EmailAuthProvider.prototype;
  dart.addTypeTests(firebase_auth.EmailAuthProvider);
  dart.addTypeCaches(firebase_auth.EmailAuthProvider);
  dart.setLibraryUri(firebase_auth.EmailAuthProvider, I[0]);
  dart.defineLazy(firebase_auth.EmailAuthProvider, {
    /*firebase_auth.EmailAuthProvider.providerId*/get providerId() {
      return "password";
    }
  }, true);
  firebase_auth.FacebookAuthProvider = class FacebookAuthProvider extends core.Object {
    static getCredential(opts) {
      let accessToken = opts && 'accessToken' in opts ? opts.accessToken : null;
      return new firebase_auth.AuthCredential.__("facebook.com", new (T.IdentityMapOfStringL$StringL()).from(["accessToken", accessToken]));
    }
  };
  (firebase_auth.FacebookAuthProvider.new = function() {
    ;
  }).prototype = firebase_auth.FacebookAuthProvider.prototype;
  dart.addTypeTests(firebase_auth.FacebookAuthProvider);
  dart.addTypeCaches(firebase_auth.FacebookAuthProvider);
  dart.setLibraryUri(firebase_auth.FacebookAuthProvider, I[0]);
  dart.defineLazy(firebase_auth.FacebookAuthProvider, {
    /*firebase_auth.FacebookAuthProvider.providerId*/get providerId() {
      return "facebook.com";
    }
  }, true);
  firebase_auth.GithubAuthProvider = class GithubAuthProvider extends core.Object {
    static getCredential(opts) {
      let token = opts && 'token' in opts ? opts.token : null;
      return new firebase_auth.AuthCredential.__("github.com", new (T.IdentityMapOfStringL$StringL()).from(["token", token]));
    }
  };
  (firebase_auth.GithubAuthProvider.new = function() {
    ;
  }).prototype = firebase_auth.GithubAuthProvider.prototype;
  dart.addTypeTests(firebase_auth.GithubAuthProvider);
  dart.addTypeCaches(firebase_auth.GithubAuthProvider);
  dart.setLibraryUri(firebase_auth.GithubAuthProvider, I[0]);
  dart.defineLazy(firebase_auth.GithubAuthProvider, {
    /*firebase_auth.GithubAuthProvider.providerId*/get providerId() {
      return "github.com";
    }
  }, true);
  firebase_auth.GoogleAuthProvider = class GoogleAuthProvider extends core.Object {
    static getCredential(opts) {
      let idToken = opts && 'idToken' in opts ? opts.idToken : null;
      let accessToken = opts && 'accessToken' in opts ? opts.accessToken : null;
      return new firebase_auth.AuthCredential.__("google.com", new (T.IdentityMapOfStringL$StringL()).from(["idToken", idToken, "accessToken", accessToken]));
    }
  };
  (firebase_auth.GoogleAuthProvider.new = function() {
    ;
  }).prototype = firebase_auth.GoogleAuthProvider.prototype;
  dart.addTypeTests(firebase_auth.GoogleAuthProvider);
  dart.addTypeCaches(firebase_auth.GoogleAuthProvider);
  dart.setLibraryUri(firebase_auth.GoogleAuthProvider, I[0]);
  dart.defineLazy(firebase_auth.GoogleAuthProvider, {
    /*firebase_auth.GoogleAuthProvider.providerId*/get providerId() {
      return "google.com";
    }
  }, true);
  firebase_auth.PhoneAuthProvider = class PhoneAuthProvider extends core.Object {
    static getCredential(opts) {
      let verificationId = opts && 'verificationId' in opts ? opts.verificationId : null;
      let smsCode = opts && 'smsCode' in opts ? opts.smsCode : null;
      return new firebase_auth.AuthCredential.__("phone", new (T.IdentityMapOfStringL$StringL()).from(["verificationId", verificationId, "smsCode", smsCode]));
    }
  };
  (firebase_auth.PhoneAuthProvider.new = function() {
    ;
  }).prototype = firebase_auth.PhoneAuthProvider.prototype;
  dart.addTypeTests(firebase_auth.PhoneAuthProvider);
  dart.addTypeCaches(firebase_auth.PhoneAuthProvider);
  dart.setLibraryUri(firebase_auth.PhoneAuthProvider, I[0]);
  dart.defineLazy(firebase_auth.PhoneAuthProvider, {
    /*firebase_auth.PhoneAuthProvider.providerId*/get providerId() {
      return "phone";
    }
  }, true);
  firebase_auth.TwitterAuthProvider = class TwitterAuthProvider extends core.Object {
    static getCredential(opts) {
      let authToken = opts && 'authToken' in opts ? opts.authToken : null;
      let authTokenSecret = opts && 'authTokenSecret' in opts ? opts.authTokenSecret : null;
      return new firebase_auth.AuthCredential.__("twitter.com", new (T.IdentityMapOfStringL$StringL()).from(["authToken", authToken, "authTokenSecret", authTokenSecret]));
    }
  };
  (firebase_auth.TwitterAuthProvider.new = function() {
    ;
  }).prototype = firebase_auth.TwitterAuthProvider.prototype;
  dart.addTypeTests(firebase_auth.TwitterAuthProvider);
  dart.addTypeCaches(firebase_auth.TwitterAuthProvider);
  dart.setLibraryUri(firebase_auth.TwitterAuthProvider, I[0]);
  dart.defineLazy(firebase_auth.TwitterAuthProvider, {
    /*firebase_auth.TwitterAuthProvider.providerId*/get providerId() {
      return "twitter.com";
    }
  }, true);
  var _provider$ = dart.privateName(firebase_auth, "_provider");
  var _data$ = dart.privateName(firebase_auth, "_data");
  firebase_auth.AuthCredential = class AuthCredential extends core.Object {};
  (firebase_auth.AuthCredential.__ = function(_provider, _data) {
    this[_provider$] = _provider;
    this[_data$] = _data;
    ;
  }).prototype = firebase_auth.AuthCredential.prototype;
  dart.addTypeTests(firebase_auth.AuthCredential);
  dart.addTypeCaches(firebase_auth.AuthCredential);
  dart.setLibraryUri(firebase_auth.AuthCredential, I[0]);
  dart.setFieldSignature(firebase_auth.AuthCredential, () => ({
    __proto__: dart.getFields(firebase_auth.AuthCredential.__proto__),
    [_provider$]: dart.finalFieldType(dart.legacy(core.String)),
    [_data$]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.String))))
  }));
  var code$ = dart.privateName(firebase_auth, "AuthException.code");
  var message$ = dart.privateName(firebase_auth, "AuthException.message");
  firebase_auth.AuthException = class AuthException extends core.Object {
    get code() {
      return this[code$];
    }
    set code(value) {
      super.code = value;
    }
    get message() {
      return this[message$];
    }
    set message(value) {
      super.message = value;
    }
  };
  (firebase_auth.AuthException.new = function(code, message) {
    this[code$] = code;
    this[message$] = message;
    ;
  }).prototype = firebase_auth.AuthException.prototype;
  dart.addTypeTests(firebase_auth.AuthException);
  dart.addTypeCaches(firebase_auth.AuthException);
  firebase_auth.AuthException[dart.implements] = () => [core.Exception];
  dart.setLibraryUri(firebase_auth.AuthException, I[0]);
  dart.setFieldSignature(firebase_auth.AuthException, () => ({
    __proto__: dart.getFields(firebase_auth.AuthException.__proto__),
    code: dart.finalFieldType(dart.legacy(core.String)),
    message: dart.finalFieldType(dart.legacy(core.String))
  }));
  var app$ = dart.privateName(firebase_auth, "FirebaseAuth.app");
  var _authStateChangedControllers = dart.privateName(firebase_auth, "_authStateChangedControllers");
  var _phoneAuthCallbacks = dart.privateName(firebase_auth, "_phoneAuthCallbacks");
  var _callHandler = dart.privateName(firebase_auth, "_callHandler");
  var _onAuthStageChangedHandler = dart.privateName(firebase_auth, "_onAuthStageChangedHandler");
  var MethodChannel__binaryMessenger = dart.privateName(platform_channel, "MethodChannel._binaryMessenger");
  var StandardMethodCodec_messageCodec = dart.privateName(message_codecs, "StandardMethodCodec.messageCodec");
  var MethodChannel_codec = dart.privateName(platform_channel, "MethodChannel.codec");
  var MethodChannel_name = dart.privateName(platform_channel, "MethodChannel.name");
  firebase_auth.FirebaseAuth = class FirebaseAuth extends core.Object {
    get app() {
      return this[app$];
    }
    set app(value) {
      super.app = value;
    }
    static fromApp(app) {
      if (!(app != null)) dart.assertFailed(null, I[1], 20, 12, "app != null");
      return new firebase_auth.FirebaseAuth.__(app);
    }
    get onAuthStateChanged() {
      let _handle = null;
      let controller = null;
      controller = T.StreamControllerOfFirebaseUserL().broadcast({onListen: dart.fn(() => {
          _handle = firebase_auth.FirebaseAuth.channel.invokeMethod(dart.dynamic, "startListeningAuthState", new (T.IdentityMapOfStringL$StringL()).from(["app", this.app.name])).then(T.intL(), dart.fn(v => T.FutureOrLOfintL().as(v), T.dynamicToFutureOrLOfintL()));
          _handle.then(core.Null, dart.fn(handle => {
            this[_authStateChangedControllers][$_set](handle, controller);
          }, T.intLToNull()));
        }, T.VoidToNull()), onCancel: dart.fn(() => {
          _handle.then(core.Null, dart.fn(handle => async.async(core.Null, (function*() {
            yield firebase_auth.FirebaseAuth.channel.invokeMethod(dart.dynamic, "stopListeningAuthState", new (T.IdentityMapOfStringL$dynamic()).from(["id", handle, "app", this.app.name]));
            this[_authStateChangedControllers][$remove](handle);
          }).bind(this)), T.intLToFutureLOfNull()));
        }, T.VoidToNull())});
      return controller.stream;
    }
    signInAnonymously() {
      return async.async(T.FirebaseUserL(), (function* signInAnonymously() {
        let data = (yield firebase_auth.FirebaseAuth.channel.invokeMethod(T.MapL(), "signInAnonymously", new (T.IdentityMapOfStringL$StringL()).from(["app", this.app.name])));
        let currentUser = new firebase_auth.FirebaseUser.__(data, this.app);
        return currentUser;
      }).bind(this));
    }
    createUserWithEmailAndPassword(opts) {
      let email = opts && 'email' in opts ? opts.email : null;
      let password = opts && 'password' in opts ? opts.password : null;
      return async.async(T.FirebaseUserL(), (function* createUserWithEmailAndPassword() {
        if (!(email != null)) dart.assertFailed(null, I[1], 103, 12, "email != null");
        if (!(password != null)) dart.assertFailed(null, I[1], 104, 12, "password != null");
        let data = (yield firebase_auth.FirebaseAuth.channel.invokeMethod(T.MapL(), "createUserWithEmailAndPassword", new (T.IdentityMapOfStringL$StringL()).from(["email", email, "password", password, "app", this.app.name])));
        let currentUser = new firebase_auth.FirebaseUser.__(data, this.app);
        return currentUser;
      }).bind(this));
    }
    fetchSignInMethodsForEmail(opts) {
      let email = opts && 'email' in opts ? opts.email : null;
      return async.async(T.ListLOfStringL(), (function* fetchSignInMethodsForEmail() {
        let t0;
        if (!(email != null)) dart.assertFailed(null, I[1], 128, 12, "email != null");
        let providers = (yield firebase_auth.FirebaseAuth.channel.invokeMethod(T.ListL(), "fetchSignInMethodsForEmail", new (T.IdentityMapOfStringL$StringL()).from(["email", email, "app", this.app.name])));
        t0 = providers;
        return t0 == null ? null : t0[$cast](T.StringL());
      }).bind(this));
    }
    sendPasswordResetEmail(opts) {
      let email = opts && 'email' in opts ? opts.email : null;
      return async.async(dart.void, (function* sendPasswordResetEmail() {
        if (!(email != null)) dart.assertFailed(null, I[1], 149, 12, "email != null");
        return yield firebase_auth.FirebaseAuth.channel.invokeMethod(dart.void, "sendPasswordResetEmail", new (T.IdentityMapOfStringL$StringL()).from(["email", email, "app", this.app.name]));
      }).bind(this));
    }
    sendSignInWithEmailLink(opts) {
      let email = opts && 'email' in opts ? opts.email : null;
      let url = opts && 'url' in opts ? opts.url : null;
      let handleCodeInApp = opts && 'handleCodeInApp' in opts ? opts.handleCodeInApp : null;
      let iOSBundleID = opts && 'iOSBundleID' in opts ? opts.iOSBundleID : null;
      let androidPackageName = opts && 'androidPackageName' in opts ? opts.androidPackageName : null;
      let androidInstallIfNotAvailable = opts && 'androidInstallIfNotAvailable' in opts ? opts.androidInstallIfNotAvailable : null;
      let androidMinimumVersion = opts && 'androidMinimumVersion' in opts ? opts.androidMinimumVersion : null;
      return async.async(dart.void, (function* sendSignInWithEmailLink() {
        if (!(email != null)) dart.assertFailed(null, I[1], 169, 12, "email != null");
        if (!(url != null)) dart.assertFailed(null, I[1], 170, 12, "url != null");
        if (!(handleCodeInApp != null)) dart.assertFailed(null, I[1], 171, 12, "handleCodeInApp != null");
        if (!(iOSBundleID != null)) dart.assertFailed(null, I[1], 172, 12, "iOSBundleID != null");
        if (!(androidPackageName != null)) dart.assertFailed(null, I[1], 173, 12, "androidPackageName != null");
        if (!(androidInstallIfNotAvailable != null)) dart.assertFailed(null, I[1], 174, 12, "androidInstallIfNotAvailable != null");
        if (!(androidMinimumVersion != null)) dart.assertFailed(null, I[1], 175, 12, "androidMinimumVersion != null");
        yield firebase_auth.FirebaseAuth.channel.invokeMethod(dart.dynamic, "sendLinkToEmail", new (T.IdentityMapOfStringL$dynamic()).from(["email", email, "url", url, "handleCodeInApp", handleCodeInApp, "iOSBundleID", iOSBundleID, "androidPackageName", androidPackageName, "androidInstallIfNotAvailable", androidInstallIfNotAvailable, "androidMinimumVersion", androidMinimumVersion, "app", this.app.name]));
      }).bind(this));
    }
    isSignInWithEmailLink(link) {
      return async.async(T.boolL(), (function* isSignInWithEmailLink() {
        return yield firebase_auth.FirebaseAuth.channel.invokeMethod(T.boolL(), "isSignInWithEmailLink", new (T.IdentityMapOfStringL$StringL()).from(["link", link, "app", this.app.name]));
      }).bind(this));
    }
    signInWithEmailAndLink(opts) {
      let email = opts && 'email' in opts ? opts.email : null;
      let link = opts && 'link' in opts ? opts.link : null;
      return async.async(T.FirebaseUserL(), (function* signInWithEmailAndLink() {
        let data = (yield firebase_auth.FirebaseAuth.channel.invokeMethod(T.MapL(), "signInWithEmailAndLink", new (T.IdentityMapOfStringL$dynamic()).from(["app", this.app.name, "email", email, "link", link])));
        let currentUser = new firebase_auth.FirebaseUser.__(data, this.app);
        return currentUser;
      }).bind(this));
    }
    signInWithEmailAndPassword(opts) {
      let email = opts && 'email' in opts ? opts.email : null;
      let password = opts && 'password' in opts ? opts.password : null;
      if (!(email != null)) dart.assertFailed(null, I[1], 243, 12, "email != null");
      if (!(password != null)) dart.assertFailed(null, I[1], 244, 12, "password != null");
      let credential = firebase_auth.EmailAuthProvider.getCredential({email: email, password: password});
      return this.signInWithCredential(credential);
    }
    signInWithCredential(credential) {
      return async.async(T.FirebaseUserL(), (function* signInWithCredential() {
        if (!(credential != null)) dart.assertFailed(null, I[1], 274, 12, "credential != null");
        let data = (yield firebase_auth.FirebaseAuth.channel.invokeMethod(T.MapL(), "signInWithCredential", new (T.IdentityMapOfStringL$dynamic()).from(["app", this.app.name, "provider", credential[_provider$], "data", credential[_data$]])));
        let currentUser = new firebase_auth.FirebaseUser.__(data, this.app);
        return currentUser;
      }).bind(this));
    }
    verifyPhoneNumber(opts) {
      let phoneNumber = opts && 'phoneNumber' in opts ? opts.phoneNumber : null;
      let timeout = opts && 'timeout' in opts ? opts.timeout : null;
      let forceResendingToken = opts && 'forceResendingToken' in opts ? opts.forceResendingToken : null;
      let verificationCompleted = opts && 'verificationCompleted' in opts ? opts.verificationCompleted : null;
      let verificationFailed = opts && 'verificationFailed' in opts ? opts.verificationFailed : null;
      let codeSent = opts && 'codeSent' in opts ? opts.codeSent : null;
      let codeAutoRetrievalTimeout = opts && 'codeAutoRetrievalTimeout' in opts ? opts.codeAutoRetrievalTimeout : null;
      return async.async(dart.void, (function* verifyPhoneNumber() {
        let callbacks = new (T.IdentityMapOfStringL$dynamic()).from(["PhoneVerificationCompleted", verificationCompleted, "PhoneVerificationFailed", verificationFailed, "PhoneCodeSent", codeSent, "PhoneCodeAuthRetrievalTimeout", codeAutoRetrievalTimeout]);
        firebase_auth.FirebaseAuth.nextHandle = dart.notNull(firebase_auth.FirebaseAuth.nextHandle) + 1;
        this[_phoneAuthCallbacks][$_set](firebase_auth.FirebaseAuth.nextHandle, callbacks);
        let params = new (T.IdentityMapOfStringL$dynamic()).from(["handle", firebase_auth.FirebaseAuth.nextHandle, "phoneNumber", phoneNumber, "timeout", timeout.inMilliseconds, "forceResendingToken", forceResendingToken, "app", this.app.name]);
        yield firebase_auth.FirebaseAuth.channel.invokeMethod(dart.dynamic, "verifyPhoneNumber", params);
      }).bind(this));
    }
    signInWithCustomToken(opts) {
      let token = opts && 'token' in opts ? opts.token : null;
      return async.async(T.FirebaseUserL(), (function* signInWithCustomToken() {
        if (!(token != null)) dart.assertFailed(null, I[1], 383, 12, "token != null");
        let data = (yield firebase_auth.FirebaseAuth.channel.invokeMethod(T.MapL(), "signInWithCustomToken", new (T.IdentityMapOfStringL$StringL()).from(["token", token, "app", this.app.name])));
        let currentUser = new firebase_auth.FirebaseUser.__(data, this.app);
        return currentUser;
      }).bind(this));
    }
    signOut() {
      return async.async(dart.void, (function* signOut() {
        return yield firebase_auth.FirebaseAuth.channel.invokeMethod(dart.void, "signOut", new (T.IdentityMapOfStringL$StringL()).from(["app", this.app.name]));
      }).bind(this));
    }
    currentUser() {
      return async.async(T.FirebaseUserL(), (function* currentUser() {
        let data = (yield firebase_auth.FirebaseAuth.channel.invokeMethod(T.MapL(), "currentUser", new (T.IdentityMapOfStringL$StringL()).from(["app", this.app.name])));
        let currentUser = data == null ? null : new firebase_auth.FirebaseUser.__(data, this.app);
        return currentUser;
      }).bind(this));
    }
    linkWithCredential(credential) {
      return async.async(T.FirebaseUserL(), (function* linkWithCredential() {
        if (!(credential != null)) dart.assertFailed(null, I[1], 436, 12, "credential != null");
        let data = (yield firebase_auth.FirebaseAuth.channel.invokeMethod(T.MapL(), "linkWithCredential", new (T.IdentityMapOfStringL$dynamic()).from(["app", this.app.name, "provider", credential[_provider$], "data", credential[_data$]])));
        let currentUser = new firebase_auth.FirebaseUser.__(data, this.app);
        return currentUser;
      }).bind(this));
    }
    setLanguageCode(language) {
      return async.async(dart.void, (function* setLanguageCode() {
        if (!(language != null)) dart.assertFailed(null, I[1], 456, 12, "language != null");
        yield firebase_auth.FirebaseAuth.channel.invokeMethod(dart.dynamic, "setLanguageCode", new (T.IdentityMapOfStringL$StringL()).from(["language", language, "app", this.app.name]));
      }).bind(this));
    }
    [_callHandler](call) {
      return async.async(dart.void, (function* _callHandler() {
        switch (call.method) {
          case "onAuthStateChanged":
          {
            this[_onAuthStageChangedHandler](call);
            break;
          }
          case "phoneVerificationCompleted":
          {
            let handle = T.intL().as(dart.dsend(call.arguments, '_get', ["handle"]));
            let verificationCompleted = T.FirebaseUserLToLvoid().as(this[_phoneAuthCallbacks][$_get](handle)[$_get]("PhoneVerificationCompleted"));
            verificationCompleted(yield this.currentUser());
            break;
          }
          case "phoneVerificationFailed":
          {
            let handle = T.intL().as(dart.dsend(call.arguments, '_get', ["handle"]));
            let verificationFailed = T.AuthExceptionLToLvoid().as(this[_phoneAuthCallbacks][$_get](handle)[$_get]("PhoneVerificationFailed"));
            let exception = T.MapL().as(dart.dsend(call.arguments, '_get', ["exception"]));
            verificationFailed(new firebase_auth.AuthException.new(T.StringL().as(exception[$_get]("code")), T.StringL().as(exception[$_get]("message"))));
            break;
          }
          case "phoneCodeSent":
          {
            let handle = T.intL().as(dart.dsend(call.arguments, '_get', ["handle"]));
            let verificationId = T.StringL().as(dart.dsend(call.arguments, '_get', ["verificationId"]));
            let forceResendingToken = T.intL().as(dart.dsend(call.arguments, '_get', ["forceResendingToken"]));
            let codeSent = T.StringLAndintLToLvoid().as(this[_phoneAuthCallbacks][$_get](handle)[$_get]("PhoneCodeSent"));
            if (forceResendingToken == null) {
              codeSent(verificationId);
            } else {
              codeSent(verificationId, forceResendingToken);
            }
            break;
          }
          case "phoneCodeAutoRetrievalTimeout":
          {
            let handle = T.intL().as(dart.dsend(call.arguments, '_get', ["handle"]));
            let codeAutoRetrievalTimeout = T.StringLToLvoid().as(this[_phoneAuthCallbacks][$_get](handle)[$_get]("PhoneCodeAuthRetrievalTimeout"));
            let verificationId = T.StringL().as(dart.dsend(call.arguments, '_get', ["verificationId"]));
            codeAutoRetrievalTimeout(verificationId);
            break;
          }
        }
      }).bind(this));
    }
    [_onAuthStageChangedHandler](call) {
      let data = T.MapL().as(dart.dsend(call.arguments, '_get', ["user"]));
      let id = T.intL().as(dart.dsend(call.arguments, '_get', ["id"]));
      let currentUser = data != null ? new firebase_auth.FirebaseUser.__(data, this.app) : null;
      this[_authStateChangedControllers][$_get](id).add(currentUser);
    }
  };
  (firebase_auth.FirebaseAuth.__ = function(app) {
    this[_authStateChangedControllers] = new (T.IdentityMapOfintL$StreamControllerLOfFirebaseUserL()).new();
    this[_phoneAuthCallbacks] = new (T.IdentityMapOfintL$MapLOfStringL$dynamic()).new();
    this[app$] = app;
    firebase_auth.FirebaseAuth.channel.setMethodCallHandler(dart.bind(this, _callHandler));
  }).prototype = firebase_auth.FirebaseAuth.prototype;
  dart.addTypeTests(firebase_auth.FirebaseAuth);
  dart.addTypeCaches(firebase_auth.FirebaseAuth);
  dart.setMethodSignature(firebase_auth.FirebaseAuth, () => ({
    __proto__: dart.getMethods(firebase_auth.FirebaseAuth.__proto__),
    signInAnonymously: dart.fnType(dart.legacy(async.Future$(dart.legacy(firebase_auth.FirebaseUser))), []),
    createUserWithEmailAndPassword: dart.fnType(dart.legacy(async.Future$(dart.legacy(firebase_auth.FirebaseUser))), [], {email: dart.legacy(core.String), password: dart.legacy(core.String)}, {}),
    fetchSignInMethodsForEmail: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List$(dart.legacy(core.String))))), [], {email: dart.legacy(core.String)}, {}),
    sendPasswordResetEmail: dart.fnType(dart.legacy(async.Future$(dart.void)), [], {email: dart.legacy(core.String)}, {}),
    sendSignInWithEmailLink: dart.fnType(dart.legacy(async.Future$(dart.void)), [], {androidInstallIfNotAvailable: dart.legacy(core.bool), androidMinimumVersion: dart.legacy(core.String), androidPackageName: dart.legacy(core.String), email: dart.legacy(core.String), handleCodeInApp: dart.legacy(core.bool), iOSBundleID: dart.legacy(core.String), url: dart.legacy(core.String)}, {}),
    isSignInWithEmailLink: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), [dart.legacy(core.String)]),
    signInWithEmailAndLink: dart.fnType(dart.legacy(async.Future$(dart.legacy(firebase_auth.FirebaseUser))), [], {email: dart.legacy(core.String), link: dart.legacy(core.String)}, {}),
    signInWithEmailAndPassword: dart.fnType(dart.legacy(async.Future$(dart.legacy(firebase_auth.FirebaseUser))), [], {email: dart.legacy(core.String), password: dart.legacy(core.String)}, {}),
    signInWithCredential: dart.fnType(dart.legacy(async.Future$(dart.legacy(firebase_auth.FirebaseUser))), [dart.legacy(firebase_auth.AuthCredential)]),
    verifyPhoneNumber: dart.fnType(dart.legacy(async.Future$(dart.void)), [], {codeAutoRetrievalTimeout: dart.legacy(dart.fnType(dart.void, [dart.legacy(core.String)])), codeSent: dart.legacy(dart.fnType(dart.void, [dart.legacy(core.String)], [dart.legacy(core.int)])), forceResendingToken: dart.legacy(core.int), phoneNumber: dart.legacy(core.String), timeout: dart.legacy(core.Duration), verificationCompleted: dart.legacy(dart.fnType(dart.void, [dart.legacy(firebase_auth.FirebaseUser)])), verificationFailed: dart.legacy(dart.fnType(dart.void, [dart.legacy(firebase_auth.AuthException)]))}, {}),
    signInWithCustomToken: dart.fnType(dart.legacy(async.Future$(dart.legacy(firebase_auth.FirebaseUser))), [], {token: dart.legacy(core.String)}, {}),
    signOut: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    currentUser: dart.fnType(dart.legacy(async.Future$(dart.legacy(firebase_auth.FirebaseUser))), []),
    linkWithCredential: dart.fnType(dart.legacy(async.Future$(dart.legacy(firebase_auth.FirebaseUser))), [dart.legacy(firebase_auth.AuthCredential)]),
    setLanguageCode: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(core.String)]),
    [_callHandler]: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(message_codec.MethodCall)]),
    [_onAuthStageChangedHandler]: dart.fnType(dart.void, [dart.legacy(message_codec.MethodCall)])
  }));
  dart.setGetterSignature(firebase_auth.FirebaseAuth, () => ({
    __proto__: dart.getGetters(firebase_auth.FirebaseAuth.__proto__),
    onAuthStateChanged: dart.legacy(async.Stream$(dart.legacy(firebase_auth.FirebaseUser)))
  }));
  dart.setLibraryUri(firebase_auth.FirebaseAuth, I[0]);
  dart.setFieldSignature(firebase_auth.FirebaseAuth, () => ({
    __proto__: dart.getFields(firebase_auth.FirebaseAuth.__proto__),
    [_authStateChangedControllers]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.int), dart.legacy(async.StreamController$(dart.legacy(firebase_auth.FirebaseUser)))))),
    [_phoneAuthCallbacks]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.int), dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))))),
    app: dart.finalFieldType(dart.legacy(firebase_core.FirebaseApp))
  }));
  dart.defineLazy(firebase_auth.FirebaseAuth, {
    /*firebase_auth.FirebaseAuth.instance*/get instance() {
      return new firebase_auth.FirebaseAuth.__(firebase_core.FirebaseApp.instance);
    },
    /*firebase_auth.FirebaseAuth.channel*/get channel() {
      return C[0] || CT.C0;
    },
    /*firebase_auth.FirebaseAuth.nextHandle*/get nextHandle() {
      return 0;
    },
    set nextHandle(_) {}
  }, true);
  var providerData = dart.privateName(firebase_auth, "FirebaseUser.providerData");
  var _metadata = dart.privateName(firebase_auth, "_metadata");
  var _app$ = dart.privateName(firebase_auth, "_app");
  var _updateData = dart.privateName(firebase_auth, "_updateData");
  firebase_auth.UserInfo = class UserInfo extends core.Object {
    get providerId() {
      return T.StringL().as(this[_data$][$_get]("providerId"));
    }
    get uid() {
      return T.StringL().as(this[_data$][$_get]("uid"));
    }
    get displayName() {
      return T.StringL().as(this[_data$][$_get]("displayName"));
    }
    get photoUrl() {
      return T.StringL().as(this[_data$][$_get]("photoUrl"));
    }
    get email() {
      return T.StringL().as(this[_data$][$_get]("email"));
    }
    get phoneNumber() {
      return T.StringL().as(this[_data$][$_get]("phoneNumber"));
    }
    toString() {
      return dart.str(this.runtimeType) + "(" + dart.str(this[_data$]) + ")";
    }
  };
  (firebase_auth.UserInfo.__ = function(_data, _app) {
    this[_data$] = _data;
    this[_app$] = _app;
    ;
  }).prototype = firebase_auth.UserInfo.prototype;
  dart.addTypeTests(firebase_auth.UserInfo);
  dart.addTypeCaches(firebase_auth.UserInfo);
  dart.setMethodSignature(firebase_auth.UserInfo, () => ({
    __proto__: dart.getMethods(firebase_auth.UserInfo.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(firebase_auth.UserInfo, () => ({
    __proto__: dart.getGetters(firebase_auth.UserInfo.__proto__),
    providerId: dart.legacy(core.String),
    uid: dart.legacy(core.String),
    displayName: dart.legacy(core.String),
    photoUrl: dart.legacy(core.String),
    email: dart.legacy(core.String),
    phoneNumber: dart.legacy(core.String)
  }));
  dart.setLibraryUri(firebase_auth.UserInfo, I[0]);
  dart.setFieldSignature(firebase_auth.UserInfo, () => ({
    __proto__: dart.getFields(firebase_auth.UserInfo.__proto__),
    [_app$]: dart.finalFieldType(dart.legacy(firebase_core.FirebaseApp)),
    [_data$]: dart.finalFieldType(dart.legacy(core.Map))
  }));
  dart.defineExtensionMethods(firebase_auth.UserInfo, ['toString']);
  firebase_auth.FirebaseUser = class FirebaseUser extends firebase_auth.UserInfo {
    get providerData() {
      return this[providerData];
    }
    set providerData(value) {
      super.providerData = value;
    }
    get metadata() {
      return this[_metadata];
    }
    get isAnonymous() {
      return T.boolL().as(this[_data$][$_get]("isAnonymous"));
    }
    get isEmailVerified() {
      return T.boolL().as(this[_data$][$_get]("isEmailVerified"));
    }
    getIdToken(opts) {
      let refresh = opts && 'refresh' in opts ? opts.refresh : false;
      return async.async(T.StringL(), (function* getIdToken() {
        return yield firebase_auth.FirebaseAuth.channel.invokeMethod(T.StringL(), "getIdToken", new (T.IdentityMapOfStringL$dynamic()).from(["refresh", refresh, "app", this[_app$].name]));
      }).bind(this));
    }
    sendEmailVerification() {
      return async.async(dart.void, (function* sendEmailVerification() {
        yield firebase_auth.FirebaseAuth.channel.invokeMethod(dart.dynamic, "sendEmailVerification", new (T.IdentityMapOfStringL$StringL()).from(["app", this[_app$].name]));
      }).bind(this));
    }
    reload() {
      return async.async(dart.void, (function* reload() {
        yield firebase_auth.FirebaseAuth.channel.invokeMethod(dart.dynamic, "reload", new (T.IdentityMapOfStringL$StringL()).from(["app", this[_app$].name]));
      }).bind(this));
    }
    delete() {
      return async.async(dart.void, (function* $delete() {
        yield firebase_auth.FirebaseAuth.channel.invokeMethod(dart.dynamic, "delete", new (T.IdentityMapOfStringL$StringL()).from(["app", this[_app$].name]));
      }).bind(this));
    }
    updateEmail(email) {
      return async.async(dart.void, (function* updateEmail() {
        if (!(email != null)) dart.assertFailed(null, I[2], 92, 12, "email != null");
        return yield firebase_auth.FirebaseAuth.channel.invokeMethod(dart.void, "updateEmail", new (T.IdentityMapOfStringL$StringL()).from(["email", email, "app", this[_app$].name]));
      }).bind(this));
    }
    updatePassword(password) {
      return async.async(dart.void, (function* updatePassword() {
        if (!(password != null)) dart.assertFailed(null, I[2], 117, 12, "password != null");
        return yield firebase_auth.FirebaseAuth.channel.invokeMethod(dart.void, "updatePassword", new (T.IdentityMapOfStringL$StringL()).from(["password", password, "app", this[_app$].name]));
      }).bind(this));
    }
    updateProfile(userUpdateInfo) {
      return async.async(dart.void, (function* updateProfile() {
        if (!(userUpdateInfo != null)) dart.assertFailed(null, I[2], 133, 12, "userUpdateInfo != null");
        let data = userUpdateInfo[_updateData];
        data[$_set]("app", this[_app$].name);
        return yield firebase_auth.FirebaseAuth.channel.invokeMethod(dart.void, "updateProfile", data);
      }).bind(this));
    }
    reauthenticateWithCredential(credential) {
      return async.async(T.FirebaseUserL(), (function* reauthenticateWithCredential() {
        if (!(credential != null)) dart.assertFailed(null, I[2], 163, 12, "credential != null");
        yield firebase_auth.FirebaseAuth.channel.invokeMethod(dart.dynamic, "reauthenticateWithCredential", new (T.IdentityMapOfStringL$dynamic()).from(["app", this[_app$].name, "provider", credential[_provider$], "data", credential[_data$]]));
        return this;
      }).bind(this));
    }
    unlinkFromProvider(provider) {
      return async.async(dart.void, (function* unlinkFromProvider() {
        if (!(provider != null)) dart.assertFailed(null, I[2], 192, 12, "provider != null");
        return yield firebase_auth.FirebaseAuth.channel.invokeMethod(dart.void, "unlinkFromProvider", new (T.IdentityMapOfStringL$StringL()).from(["provider", provider, "app", this[_app$].name]));
      }).bind(this));
    }
    toString() {
      return dart.str(this.runtimeType) + "(" + dart.str(this[_data$]) + ")";
    }
  };
  (firebase_auth.FirebaseUser.__ = function(data, app) {
    this[providerData] = T.ListLOfUserInfoL().as(dart.dsend(dart.dgsend(data[$_get]("providerData"), [T.UserInfoL()], 'map', [dart.fn(item => new firebase_auth.UserInfo.__(T.MapL().as(item), app), T.dynamicToUserInfoL())]), 'toList', []));
    this[_metadata] = new firebase_auth.FirebaseUserMetadata.__(data);
    firebase_auth.FirebaseUser.__proto__.__.call(this, data, app);
    ;
  }).prototype = firebase_auth.FirebaseUser.prototype;
  dart.addTypeTests(firebase_auth.FirebaseUser);
  dart.addTypeCaches(firebase_auth.FirebaseUser);
  dart.setMethodSignature(firebase_auth.FirebaseUser, () => ({
    __proto__: dart.getMethods(firebase_auth.FirebaseUser.__proto__),
    getIdToken: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.String))), [], {refresh: dart.legacy(core.bool)}, {}),
    sendEmailVerification: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    reload: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    delete: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    updateEmail: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(core.String)]),
    updatePassword: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(core.String)]),
    updateProfile: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(firebase_auth.UserUpdateInfo)]),
    reauthenticateWithCredential: dart.fnType(dart.legacy(async.Future$(dart.legacy(firebase_auth.FirebaseUser))), [dart.legacy(firebase_auth.AuthCredential)]),
    unlinkFromProvider: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(core.String)])
  }));
  dart.setGetterSignature(firebase_auth.FirebaseUser, () => ({
    __proto__: dart.getGetters(firebase_auth.FirebaseUser.__proto__),
    metadata: dart.legacy(firebase_auth.FirebaseUserMetadata),
    isAnonymous: dart.legacy(core.bool),
    isEmailVerified: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(firebase_auth.FirebaseUser, I[0]);
  dart.setFieldSignature(firebase_auth.FirebaseUser, () => ({
    __proto__: dart.getFields(firebase_auth.FirebaseUser.__proto__),
    providerData: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(firebase_auth.UserInfo)))),
    [_metadata]: dart.finalFieldType(dart.legacy(firebase_auth.FirebaseUserMetadata))
  }));
  dart.defineExtensionMethods(firebase_auth.FirebaseUser, ['toString']);
  firebase_auth.FirebaseUserMetadata = class FirebaseUserMetadata extends core.Object {
    get creationTimestamp() {
      return T.intL().as(this[_data$][$_get]("creationTimestamp"));
    }
    get lastSignInTimestamp() {
      return T.intL().as(this[_data$][$_get]("lastSignInTimestamp"));
    }
  };
  (firebase_auth.FirebaseUserMetadata.__ = function(_data) {
    this[_data$] = _data;
    ;
  }).prototype = firebase_auth.FirebaseUserMetadata.prototype;
  dart.addTypeTests(firebase_auth.FirebaseUserMetadata);
  dart.addTypeCaches(firebase_auth.FirebaseUserMetadata);
  dart.setGetterSignature(firebase_auth.FirebaseUserMetadata, () => ({
    __proto__: dart.getGetters(firebase_auth.FirebaseUserMetadata.__proto__),
    creationTimestamp: dart.legacy(core.int),
    lastSignInTimestamp: dart.legacy(core.int)
  }));
  dart.setLibraryUri(firebase_auth.FirebaseUserMetadata, I[0]);
  dart.setFieldSignature(firebase_auth.FirebaseUserMetadata, () => ({
    __proto__: dart.getFields(firebase_auth.FirebaseUserMetadata.__proto__),
    [_data$]: dart.finalFieldType(dart.legacy(core.Map))
  }));
  firebase_auth.UserUpdateInfo = class UserUpdateInfo extends core.Object {
    set displayName(displayName) {
      let t2, t1, t0;
      t0 = this[_updateData];
      t1 = "displayName";
      t2 = displayName;
      t0[$_set](t1, t2);
      return t2;
    }
    get displayName() {
      return this[_updateData][$_get]("displayName");
    }
    set photoUrl(photoUri) {
      let t2, t1, t0;
      t0 = this[_updateData];
      t1 = "photoUrl";
      t2 = photoUri;
      t0[$_set](t1, t2);
      return t2;
    }
    get photoUrl() {
      return this[_updateData][$_get]("photoUrl");
    }
  };
  (firebase_auth.UserUpdateInfo.new = function() {
    this[_updateData] = new (T.IdentityMapOfStringL$StringL()).new();
    ;
  }).prototype = firebase_auth.UserUpdateInfo.prototype;
  dart.addTypeTests(firebase_auth.UserUpdateInfo);
  dart.addTypeCaches(firebase_auth.UserUpdateInfo);
  dart.setGetterSignature(firebase_auth.UserUpdateInfo, () => ({
    __proto__: dart.getGetters(firebase_auth.UserUpdateInfo.__proto__),
    displayName: dart.legacy(core.String),
    photoUrl: dart.legacy(core.String)
  }));
  dart.setSetterSignature(firebase_auth.UserUpdateInfo, () => ({
    __proto__: dart.getSetters(firebase_auth.UserUpdateInfo.__proto__),
    displayName: dart.legacy(core.String),
    photoUrl: dart.legacy(core.String)
  }));
  dart.setLibraryUri(firebase_auth.UserUpdateInfo, I[0]);
  dart.setFieldSignature(firebase_auth.UserUpdateInfo, () => ({
    __proto__: dart.getFields(firebase_auth.UserUpdateInfo.__proto__),
    [_updateData]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.String))))
  }));
  dart.trackLibraries("packages/firebase_auth/firebase_auth.dart", {
    "package:firebase_auth/firebase_auth.dart": firebase_auth
  }, {
    "package:firebase_auth/firebase_auth.dart": ["src/auth_provider/email_auth_provider.dart", "src/auth_provider/facebook_auth_provider.dart", "src/auth_provider/github_auth_provider.dart", "src/auth_provider/google_auth_provider.dart", "src/auth_provider/phone_auth_provider.dart", "src/auth_provider/twitter_auth_provider.dart", "src/auth_credential.dart", "src/auth_exception.dart", "src/firebase_auth.dart", "src/firebase_user.dart", "src/user_info.dart", "src/user_metadata.dart", "src/user_update_info.dart"]
  }, '{"version":3,"sourceRoot":"","sources":["src/auth_provider/email_auth_provider.dart","src/auth_provider/facebook_auth_provider.dart","src/auth_provider/github_auth_provider.dart","src/auth_provider/google_auth_provider.dart","src/auth_provider/phone_auth_provider.dart","src/auth_provider/twitter_auth_provider.dart","src/auth_credential.dart","src/auth_exception.dart","src/firebase_auth.dart","src/user_info.dart","src/firebase_user.dart","src/user_metadata.dart","src/user_update_info.dart"],"names":[],"mappings":"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","file":"../../../../../../../../H:/packages/firebase_auth/firebase_auth.dart.lib.js"}');
  // Exports:
  return {
    firebase_auth: firebase_auth
  };
}));

//# sourceMappingURL=firebase_auth.dart.lib.js.map
